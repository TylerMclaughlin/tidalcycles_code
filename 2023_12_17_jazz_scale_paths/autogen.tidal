:script "/Users/r_tyler/Music/ableton_songs/toolz.tidal"

:script "/Users/r_tyler/Music/ableton_songs/pigments_midi_map.tidal"

:script "/Users/r_tyler/Music/ableton_songs/breakz.tidal"

let major shift  =  listToPat $ fromIntegral $ sort $ (`mod` 12) <$> (+shift) <$> [0,2,4,5,7,9,11]
    mminor shift  =  listToPat $  fromIntegral $ sort $ (`mod` 12) <$> (+shift) <$> [0,2,3,5,7,9,11]
    hmajor shift  =  listToPat $ fromIntegral $ sort $ (`mod` 12) <$> (+shift) <$> [0,2,4,5,7,8,11]
    hminor shift   = listToPat $ fromIntegral $ sort $ (`mod` 12) <$> (+shift) <$> [0,2,3,5,7,8,11]

n (fmap (fromIntegral) tScale ( mminor 3) "0 2 4 5 6" )

n ((tScale (mminor 3)) "0 2 4 5 6" )

n ((tScale "0 2 4 5 ") "0 2 4 5 6 7")

toScale (sort $ (`mod` 12) <$> (+3) <$> [0,2,4,5,7,9,11]) "0 2 4 5 6 7"

let p = ("[1,3,5,7]" |- 1)


n (major 3 p)

d1 $ n ((hmajor 3 "1 3 5 7" :: Pattern Int)) # m 1 

n( hmajor 3 "0 1 2 3 4 5 6")

:t (tScale "0 3 4 5" "0 5 2 ")

n (hmajor 3 (parseBP_E "0 1 2 3 4 5 6"))

d1 $ n ( hmajor 3 p)

:t (major 0)

:t [0,2,4]

n (toScale (major 0 :: Integral Note) "0 2 4 5 6")

n (toScale [0,2,4,5,7,9,11] "0 2 4 5 6")


n (toScale (sort $ (`mod` 12) <$> (+3) <$> [0,2,4,5,7,9,11]) "0 2 4 5 6") 

d1 $ struct "[t(9, 16) t(3, 8)]/2" $ cat [
     n (toScale (major 0) (p |+ 1) ),
     n (toScale (major 7) (p |+ 2) ),
     n (toScale (hmajor 7) (p |+ 3) ),
     n (toScale (hminor 7) (p |+ 2) ),
     n (toScale (major 10) (p |+ 5) ),
     n (toScale (major 3) (p |+ 3) ),
     n (toScale (mminor 5) (p |+ 1) ),
     n (toScale (hmajor 0) (p |+ 4) ),
     n (toScale (hminor 9) (p |+ 6) ),
     n (toScale (major 0) (p |+ 7) )] # m 1


resetCycles

d1 $ struct "[t(9,16) t(3,8)]/2"$ slow 2 $ cat [n (tScale "0 2 4 5 7 9 11" (p |+ 2) ),
     n (tScale "0 2 4 6 7 9 11" (p |+ "[3,5]") ),
     n (tScale "0 2 3 6 7 9 11" (p |+ 6) ),
     n (tScale "0 2 3 6 7 9 10" (p |+ "[5,7]") ),
     n (tScale "0 2 3 5 7 9 10" (p |+ 3) ),
     n (tScale "0 2 3 5 7 8 10" (p |+ "[4,6]") ),
     n (tScale "0 2 4 5 7 8 10" (p |+ 6) ),
     n (tScale "0 2 4 5 7 8 11" (p |+ "[3]") ),
     n (tScale "0 2 4 5 8 9 11" (p |+ 2) ),
     n (tScale "0 2 4 5 7 9 11" (p |+ "[1,3]") )] # m 3

let p = "[1 3 5 7]*8" 

d1 $ fast 1 $ (|+ n "[0 7]/14") $ slow 2 $ cat [n (tScale "0 2 4 5 7 9 11" (p |+ 2) ),
     n (tScale "0 2 4 6 7 9 11" (p |+ "1 [3 4]") ),
     n (tScale "0 2 3 6 7 9 11" (p |+ "2 [2 1]") ),
     n (tScale "0 2 3 6 7 9 10" (p |+ "3 [3 4]") ),
     n (tScale "0 2 3 5 7 9 10" (p |+ "4 [2 5]") ),
     n (tScale "0 2 3 5 7 8 10" (p |+ "1 [5 2] ") ),
     n (tScale "0 2 4 5 7 8 10" (p |+ "1 [2 2 3 4]") ),
     n (tScale "0 2 4 5 7 8 11" (p |+ "1") ),
     n (tScale "0 2 4 5 8 9 11" (p |+ "2") ),
     n (tScale "0 2 4 5 7 9 11" (p |+ "1 5 6") )] # s "midi" # midichanTake "mct" [2]


let p = "[0 2 4 2 0 4]"


d1 $ n (tScale "0 2 4 7 9 11" $
      slow 1 $ ("[{0 1 [3 5 4 2] }%5]" |+ "[1, 8]")) # m 3

let void p scalePatList = cat $ note <$> (`tScale` p) <$> scalePatList


d1 $ slow 4 $ fast 5 $ slow 3 $
     void (fast 4 $ ("[0 1 [3 5 4 2] ]" |+ "[1, 8]")) ["0 2 3 7 9 11", "0 2 4 7 9 11"]# m 3

d1 $ cat [n "0", n "4", n "7"] # m 3

d1 $ n "<0 4 7>" # m 3

d1 $ n (tScale "0 2 4 7 9 11" $
      slow 1 $ ("[{0 1 [3 5 4 2] }%5]" |+ "1")) # m 3

d2 $ slow 2 $ n "0 12" # m 3

d1 $ n (tScale "0 2 4 7 9 11" $
      slow 2 "[{0 1 [3 5 4 2] }%5]") # m 2

getbpm

setbpm 121


d1 $ fast "8" $ (|+ n "[0 7]/14") $ slow 2 $
     cat [n (tScale "0 2 4 5 7 9 11" (p |+ 2) ),
     n (tScale "0 2 4 6 7 9 11" (p) ),
     n (tScale "0 2 3 6 7 9 11" (p) ),
     n (tScale "0 2 3 6 7 9 10" (p) ),
     n (tScale "0 2 3 5 7 9 10" (p) ),
     n (tScale "0 2 3 5 7 8 10" (p) ),
     n (tScale "0 2 4 5 7 8 10" (p) ),
     n (tScale "0 2 4 5 7 8 11" (p)),
     n (tScale "0 2 4 5 8 9 11" (p)),
     n (tScale "0 2 4 5 7 9 11" (p) )] # s "midi" # midichanTake "mct" [2, 2, 2]

d1 $ void ( "0 2 4 [2 1] 0 7 4 2" |+ "[0 2 4 2 [2 1]]/4") ["0 2 4 6 7 9 11",
                           --"0 2 3 6 7 9 11",
                           --"0 2 3 6 7 9 10",
                           "0 2 3 5 7 9 10",
                           "0 2 3 5 7 8 10",
                           "0 2 4 5 7 8 10",
                           "0 2 4 5 7 8 11",
                           "0 2 4 5 8 9 11",
                           "0 2 4 5 7 9 11"
                           ] # m 1

d1 $ void ( "0 2 4 [2 1] 0 7 4 2" |+ "[0 2 4 2 [2 1]]/4" |+ 2) ["0 2 4 6 7 9 11",
                           --"0 2 3 6 7 9 11",
                           --"0 2 3 6 7 9 10",
                           "0 2 3 5 7 9 10",
                           "0 2 3 5 7 8 10",
                           "0 2 4 5 7 8 10",
                           "0 2 4 5 7 8 11",
                           ("0 2 4 5 8 9 11" |+ 2),
                           "0 2 4 5 7 9 11"
                           ] # m 3

d1 $ rizz 1 "[0 0.008 0.01] 0.012 0.012 0.012 0.012" $ slow 2 $ void (fast 2 $ "[3 2 1] 4 5 0 1 [2 4 2] 4 5 0 7" |+ "[0 1 2 1 2 3 4 3]/16")
      ["0 2 4 7 9 11", "0 2 3 7 9 11"] # m 3

d2 $ void ["0 "]

