
let scaleT transp s realpat = n ( toScale (fmap (+ transp) $ patternToList s) realpat )
    piano transp scalePat lhPat rhPat  = scaleT transp scalePat (stack [lhPat, rhPat] )
    inv7 chordScalePat pat = toScale' 7 (patternToList chordScalePat) pat
    iPiano transp scalePat ssLPat lhPat ssRPat rhPat  = scaleT transp scalePat (stack [inv7 ssLPat lhPat, inv7 ssRPat rhPat] )
    harmmaj = "0 2 4 5 7 8 11"
    harmmin = "0 2 3 5 7 8 11"
    melomin = "0 2 3 5 7 9 11"
    major = "0 2 4 5 7 9 11"


d1 $ n (toScale [0,4,7] ("0 2 4" |+ 4)) # sound "arpy"

let n' transp pat = n (pat |+ (parseBP_E (show transp))) 

let center transp pat =  (pat |+ (parseBP_E (show transp))) 

d1 $ n (xd 2 "1 2 3 ") # sound "arpy"

d1 $ n  ("1 2 3" |+ (parseBP_E (show 2)))  # sound "arpy"

-- OK this is the good one. 
let piano transp scalePat lhPat rhPat  = scaleT transp scalePat (stack [lhPat, rhPat] )


let inv7 chordScalePat pat = toScale' 7 (patternToList chordScalePat) pat

d1 $ n (inv7 "0 1 2" "3 4 5 6 7 8 9 10 11 12 13 14") # m 1

let iPiano transp scalePat ssLPat lhPat ssRPat rhPat  = scaleT transp scalePat (stack [inv7 ssLPat lhPat, inv7 ssRPat rhPat] )

d1 $ iPiano 4 major ("3 5 4" |+ "[6 4 2]/2") ("0 1 2 3 4" |- 5) ("5 6 8" |- "2 2 2") "4 5 6 7" # m 1

d1 $ iPiano 4 major ("0 2 4 6" |+ "0") ("[ 2, 3, 4, 5]" ) ("7 10" |- "2") ("[ 1, 2]" +| "[0 1 2 3]" ) # m 1

d1 $ (# nudge ("[0 0.00]!16 0.00")) $ (|+ n (slow 8 $ "0 0 0 2") ) $ 
    stack [ struct "1000 1001 0101 0110 1"  $ slow 4 $ cat [
        iPiano 4 major ("0 2 4 6" |+ "0") ("[ 2, 3, 4, 5]" +| "0 1 2 3 4 -1" ) 
               ("7 10 13" |- "2") ("[ 1, 2, 3, 4]" +| "[0 1 2 -3 -2 -1]" ) # m 1,
        iPiano 4 major ("0 2 4 6" |+ "2") ("[ 2, 3, 4, 5]" +| "0 1 2 3 4 -1" ) 
               ("7 10 13" |- "2") ("[ 1, 2, 3, 4]" +| "[0 1 2 -3 -2 -1]" ) # m 1
        ],
        cat [
            (|+ n "[0  0 <7 2>  0]/8") $ struct "1000 1001 0000 100<01> 0  " 
             $ nTake "b" (patternToList "0  4 12 12" ), 
            (|+ n "[0  0 <7 2>  0]/8") $ struct "1000 1001 0000 100<01> 0  " 
            $ nTake "c" (patternToList "0  12 0 12")] # legato "2 0.2" # m 3 
]

d1 $ (# nudge ("[0 0.00]!16 0.00")) $ (|+ n (slow 8 $ "0 0 0 2") ) $ 
    stack [ struct "1000 1001 0101 0110 1"  $ slow 4 $ cat [
        iPiano 4 major ("0 2 4 6" |+ "0") ("[ 2, 3, 4, 5]" +| "0 1 2 3 4 -1" ) 
               ("7 10 13" |- "2") ("[ 1, 2, 3, 4]" +| "[0 1 2 -3 -2 -1]" ) # m 1,
        iPiano 4 major ("0 2 4 6" |+ "2") ("[ 2, 3, 4, 5]" +| "0 1 2 3 4 -1" ) 
               ("7 10 13" |- "2") ("[ 1, 2, 3, 4]" +| "[0 1 2 -3 -2 -1]" ) # m 1
        ],
        cat [
             (|- n "8 10") $  struct "1 ~ ~ ~   ~ ~ 1 ~ ~   ~ ~ ~  1   ~ ~ ~ ~  ~" $ n "0 12 " # m 3 
    ]
]


-- two step
d5 $ drumz $ n "[~ <3 3 3 3(<3 2 3 <1 5 1 1 >>, 17)>]/2" # m 2

d6 $ drumz $ n "<0 [~!15 0 ~] 0  ~ >" # m 2 # amp 1

d6 $ drumz $ n "<0 <[~!15 0 ~]!3 [ ~ ~!4 0 ~!5 0 ~!5]> 0  ~ >" # m 2 # amp 1

d7 silence

d7 $ drumz $ slow 4 $ fast (17/8) $  n "[8 7 8 7 8 7 8 4]" # m 4


d7 $ drumz $ every 4 (fast 2)  $ struct "t(18, 34)" $ nTake "breaks" (patternToList ( "0 .. 31 ")) # m 5 # legato "8"

d7 $ drumz $ every 4 (fast 2)  $ struct "{t@4   t@4  t@4  t@4 t }" $ nTake "breaks" (patternToList ( "5 .. 9 ")) # m 5 # legato "8"

d8 $ stack [
    midibend $ (slow 8 $ struct "t*256" $ range 0 16383 sine)
    ,
    n "0"]
  # s "midi" # midichan "9" 

d8 $ stack [
    midibend $ (slow 8 $ struct "t*256" $ range 0 819 sine)
    ,
    n "0"]
  # s "midi" # midichan "9" 

d10 $ (|- n 16) $ slow 2 $ n "1 2 3 4  5 6 7 8  9 10 <11 -5> 12  13 14 15 16" # m 10

d3 $ drumz $ slow 2 $ n "8*17" # m 2

d4 $ drumz $ slow 2 $ n "0 ~ ~ ~   0 ~ ~ ~ 0  0 ~ ~ <0 ~ 0 ~>   0 ~ <~ ~ 0 ~> ~ < 0 ~ 0  0>" # m 2

d9 $ (|+ n "[0@4 2@4 -5@2 7@2 0@4]/16") $ stack [
       n (toScale [0, 5, 7, 10, 15] ("[0,1,2,3,4]" |+ "[-2 -1 0 1  2 3 4 5]/64")) # m 9,
       n "0@6 3@4 ~!2 [<7 10>]@5" # m 3
]


d9 $ (|- n 24) $ slow 2 $ n "0*17" # m 2 

d10 $ (|- n 16) $ bite 4 "0 8 4 12" $ slow 2 $ n "1 2 3 4  5 6 7 8  9 10 <11 -5> 12  13 14 15 16" # m "10@2 11 10@2 11 10@2"

d9 $ (|+ n 3) $  (|- n "[16 0 24 0]/8") $ n "1 .. 8" # m 8

d9 $ (|- n 12) $ slow 2 $  n "1 .. 16" # m 8

d7 $ drumz $ (|+ nTake "y"  (take  5 (cycle [52, 48, 45, 48, 52, 48, 45, 48]))) $ (("2"/17) <~ ) 
      $ n "8 8 <~ ~ > ~ 8 ~  8 ~ <~ ~> ~   8 <~!3 8>  <~!4 8 >   ~ ~ "
      # m 5 # ampTake "amp" [0.7, 0.5,  0.6, 0.4, 0.3]


d10 $ n "0 -10" # m 9

d7 silence

d7 $ drumz $ (|+ nTake "y"  (take  5 (cycle [52, 48, 45, 48, 52, 48, 45, 48]))) $ (("2"/17) <~ ) $ n "8 8 <~ ~ > ~ 8 ~  8 ~ <~ ~> ~   8 <~!3 8>  <~!4 8 >   ~ ~ " # m 4 # ampTake "amp" [0.7, 0.5,  0.6, 0.4, 0.3]


d6 $ drumz $ (# amp "[<1>(5,8,5)]@16 ~ 1 ~ ~ 1   ~ 1 1 ~  ~ 1 ~ 1  ~ ~ 1 ~ ~ ") $ n "0" # m 2

d4 $ n (timeline [0, 2, 4]) # m 1

d2 $ (# nudge ("0")) $ n "0" # m 2

d1 $ drumz $ n "[0(3,8)]@8 0" # m 2

d1 $ drumz$ n "[0 10]!4 0 " # m 2

d2 $ drumz $ n "8 8 ~ 8  ~ 8 ~ 8  8 " # m 2

d2 $ drumz $ n  "[ 0 0 ]"# m 2

d1 $ iPiano 4 major ("0 2 4 6" |+ "0") ("[0, 1, 2, 3]" ) ("7 10" |- "2") ("[ 1, 2]" +| "[0 1 2 3]" ) # m 1


let center amt p = ( p |- (parseBP_E (show amt)))



-- does not work.. why though?
let piano transp scalePat lhPat rhPat  = stack [scaleT transp scalePat (center transp (lhPat)), scaleT transp scalePat rhPat] 



d1 $  scaleT 5 "0 4 7"  ( center 5 ("5 4 3")) # m 1

:t center


d1 $ n $ stack ["0 2 4", "3 5 6"] # m 1

let asdf p amt = (|+ n  amt ) ( n (toScale [0, 2, 4] "0 2 4")) 

center 4 ( "[0,4,5]")

d1 $ piano 3 major ("[0, 2, 4]" |+| "0 1*3 4 3*3") ("[3, 5, 7]" |+| "[8@3  8@3 ~ ~ ] 7 5 6") # m 1



setcps(1/120*160)

d1  $ slow 2 $ struct (cat ["1001 0010 1011 0101 1" ,
                            "1001 <01>110 <01>110 0101",
                            "1011 0010 1011 0101 1" ,
                            "1001 <01>110 <01>11<0 1> 0101"])
 $ cat [
    piano (0) major ("[0, 2, 4]" |+ 2 ) ("[5, 7, 9]"  ),
    piano (5) melomin ("[0, 2, 4]" |- 2) ("[5, 7, 9]" |- 2),
    piano (5) major ("[0, 2, 4]" |- 3 ) ("[5, 7, 9]" |- 3 ),
    piano (0) harmmaj ("[0, 2, 4]" ) ("[5, 7, 9]" ),
    piano (-5) melomin ("[0, 2, 5]" |+ 3 ) ("[6, 8, 10]" |+ 4 ),
    piano (4) harmmin ("[0, 2, 4]" |- 1 ) ("[5, 7, 9]" |- 2 ),
    piano (0) major ("[0, 2, 4]" |+ 1 ) ("[5, 7, 9]" |+ 1 ),
    piano (5) melomin ("[0, 2, 4]" |- 4 ) ("[5, 7, 9]" |- 3 )
    ] # legato "1.5 1.4 0.25 0.35 " # amp "0.7 0.6" # m 1

d2 $ drumz $ n "0(3,8)"  # m 2

d1  $ slow 2 $ struct (cat ["1001 0010 1011 0101 1" ,
                            "1001 <01>110 <01>110 0101",
                            "1011 0010 1011 0101 1" ,
                            "1001 <01>110 <01>11<0 1> 0101"])
 $ stack [ cat [
    piano (0) major ("[0, 2, 4]" |+ 2 ) ("[5, 7, 9]"  ),
    piano (5) melomin ("[0, 2, 4]" |- 2) ("[5, 7, 9]" |- "2 0 "),
    piano (5) major ("[0, 2, 4]" |- 3 ) ("[5, 7, 9]" |- 3 ),
    piano (0) harmmaj ("[0, 2, 4]" ) ("[5, 7, 9]" ),
    piano (-5) melomin ("[0, 2, 5]" |+ 3 ) ("[6, 8, 10]" |+ 4 ),
    piano (4) harmmin ("[0, 2, 4]" |- 1 ) ("[5, 7, 9]" |- 2 ),
    piano (0) major ("[0, 2, 4]" |+ "<1 0>" ) ("[5, 7, 9]" |+ "<1 3>" ),
    piano (5) melomin ("[0, 2, 4]" |- 4 ) ("[5, 7, 9]" |- 3 )
    ] # legato "1.5 1.4 0.25 0.35 " # amp "0.7 0.6" # m 1,
  (|*| amp (cat [ "0 0.3 0 0.2", "0 0.4", "0 0.4 0 0.2", " 0.6" ])) $ drumz $ n 10 # m 2,
  (|*| amp (cat [ "0", "0.1 <0 0.1> <0 0 0 0.1> 0" ])) $ drumz $ n 3 # m 2,
    (|*| amp "0.5 ~ 0.5   ~ ~ 0.5 ~ <~ 0.0> < ~ ~ 0.4>") $ drumz $ n "0" # m 2,
    (|*| amp "0.5") $ drumz $ n "0" # m 2

]

d3 $ slow 2 $  n "0 ~  0 ~  0 ~  <[0] [ 0 ~ ] > [0 0] "  # m 4

d3 $ slow 2 $  cat [n "0@2 ~!2  0@2 ~!2  0@2 ~!2  <[0] [ 0  ] > ~  [0 0]@2 0 ",
                  n "0@2 ~!2  0@2 ~!2  0@2 ~!2  <[0] [ 0  ] > ~  [0 0]@2 "]  # m 4

d5 $ slow 2 $ (|- n 12) $ (0.125 <~) $ cat [n "0@2 ~!2   0@2 ~!2  0@2 ~!2   0@2 ~!2 <0 ~>  ",
                  n "0@2 ~!2  0@2 ~!2  0@2 ~!2  0@2 ~ ~"]  # legato "0.7 0.6 0.5 0.6" # m 5

-- ride
d7 $ 



d1 $ n ( "1 2 3 4")  # m 1

piano 3 major ("2 4 5") ("3 5 6" |+ "3")

(stack [(center 4 "0 2 4"), center 4 "5 4 4"] )


center


d1 $ fast 2 $ cat [
       piano (-4) harmmin ("[0, 2, 4]" |+  "3") ("[1,3,<5 7>]" |+ "4" ),
       piano (-3) harmmaj ("[3,5,6]")  ("[2,4,6]")] # m 1

d1 $ scaleT 3 harmmin (stack ["[0, 2, 4]" +| "5 7") # m 1

d1 $ cat [n "" ]# m 1
