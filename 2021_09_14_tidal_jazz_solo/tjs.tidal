
let nT name amt p = nTake name (take amt (cycle (patternToList p))) 

let scaleToList scalePat pat = (patternToList (toScale (patternToList scalePat) pat )) 

let tScale scalePat pat = toScale (patternToList scalePat) pat 

d1 $ struct "1001 0101 0100 1010 1 1" $  nT "e" 7 (tScale "0 5 7 10" "2 3 5 4 3 5 0 3 5 4 3 5" ) # m 4

d2 $ struct "1010 0101 1100 0010 1 1" $ (|+ n "12") $ nT "f" 7 (tScale "0 5 7 10" "3 5 4 3 5 0 3 5 4 3 5" ) # m 4

d1 $ struct "101101101111101101101111" $ nT "fa" 14 (tScale "0 1 3 4 7 10" "7 6 5 1 5 1 4 3 2 3 ")  # m 4

d1 $ struct "101101101111101101101111" ( nT "fa" 14 (tScale "0 1 3 4 7 10" "7 6 5 1 5 1 4 3 2 3 ")  ) # m 4


let fit16 pat = parseBP_E ("{" ++ pat ++ "}%16")
    fit12 pat = parseBP_E ("{" ++ pat ++ "}%12")
    fit8 pat = parseBP_E ("{" ++ pat ++ "}%8")
    fit6 pat = parseBP_E ("{" ++ pat ++ "}%6")
    fit4 pat = parseBP_E ("{" ++ pat ++ "}%4")
    fitN  n pat = parseBP_E ("{" ++ pat ++ "}%" ++ (show n ))


d1 $ struct (fitSixteen ("t t ")) $ n 0  # m 4
d1 $ struct (fitSixteen ("t t ")) $ n 0  # m 4

d1 $ n "{0 2 4}%16" # m 4

d1 $ n (fitSixteen("0 2 4")) # m 4

d1 $ n (fitN 16 ("0 2 4")) # m 4

d2 $ drumz $ n "0 [0,4] 0 [0,4]" # m 1

let jazzSolo nStructFit structPat takeName nToTake scalePat notesPat =  struct (fitN nStructFit structPat) (nT takeName nToTake (tScale scalePat notesPat )) 

d1 $ jazzSolo 16 "1011011" "frodo" 15 "0 3 10 12" "0 2 3 4 2 1 3 2 4 5 6 4 2" # m 4

d1 $ jazzSolo 16 "1011011" "frodo" 2 "0 3 10 12" "0 2 3 4 2 1 3 2 4 5 6 4 2" # m 4

d1 $ jazzSolo 16 "1011011" "frodo" 2 "0 3 10 12" "0 2 3 4 2 1 3 2 4 5 6 4 2" # m 4


d1 $ (# nudge (fast 8 $ "0.0 0.01")) $ cat [
    struct (fitN 16 "1 0 10 10 11 1110") $
        stack [ nT "j1" 15 (tScale "0 3 10 12" "7 6 5 4 3 2 3 1 2") # m 4,
            degradeBy 0.3 $ fast 8  $ n (tScale "0 2 3 5 7 9 10" "[0,2,4,6]") # m 5 ],
    struct (fitN 16 "1 1 00 11 01 1110") $
        stack [ nT "j2" 15 (tScale "0 3 10 12" "8 7 6 5 4 3 2 3 1 2 8") # m 4,
            degradeBy 0.4 $ fast 8  $ n (tScale "0 2 3 5 7 9 10" "[0,2,3,6]") # m 5 ],
    (|- n 2 ) $ struct (fitN 16 "1 0 10 10 11 1010") $
        stack [ nT "j3" 7 (tScale "0 3 10 12" "4 5 7 6 5 4 3 2 3 1 2") # m 4,
            degradeBy 0.3 $ fast 8  $ n (tScale "0 2 3 5 7 9 10" "[0,2,4,6]") # m 5 ],
    (|- n 2) $ struct (fitN 16 "1 1 00 11 01 1110") $
        stack [ nT "j4" 15 (tScale "0 3 10 12" "7 6 5 4 3 2 3 1 2") # m 4,
            degradeBy 0.4 $ fast 8  $ n (tScale "0 2 3 5 7 9 10" "[2,3,6, 7]") # m 5 ]
]

d1 $ (# nudge (fast 8 $ "0.0 0.01")) $ cat [
    struct (fitN 16 "1 0 10 10 11 1110") $
        stack [ nT "j1" 15 (tScale "0 3 10 12" "7 6 5 4 3 2 3 1 2") # m 6,
            degradeBy 0.3 $ fast 8  $ n (tScale "0 2 3 5 7 9 10" "[0,2,4,6]") # m 7 ],
    struct (fitN 16 "1 1 00 11 01 1110") $
        stack [ nT "j2" 15 (tScale "0 3 10 12" "8 7 6 5 4 3 2 3 1 2 8") # m 6,
            degradeBy 0.4 $ fast 8  $ n (tScale "0 2 3 5 7 9 10" "[0,2,3,6]") # m 7 ],
    (|- n 2 ) $ struct (fitN 16 "1 0 10 10 11 1010") $
        stack [ nT "j3" 7 (tScale "0 3 10 12" "4 5 7 6 5 4 3 2 3 1 2") # m 6,
            degradeBy 0.3 $ fast 8  $ n (tScale "0 2 3 5 7 9 10" "[0,2,4,6]") # m 7 ],
    (|- n 2) $ struct (fitN 16 "1 1 00 11 01 1110") $
        stack [ nT "j4" 15 (tScale "0 3 10 12" "7 6 5 4 3 2 3 1 2") # m 6,
            degradeBy 0.4 $ fast 8  $ n (tScale "0 2 3 5 7 9 10" "[2,3,6, 7]") # m 7 ]
]


do
  d2 $ (# nudge (fast 8 "0 0.01")) $ drumz $ n "0 0 <0 [0 ~ ~ 0]> [0 0]" # m 1 
  d3 $ (# nudge (fast 8 "0 0.01")) $ drumz $ n "~ 8 8 8 ~ 8 8 8 ~ 8 8 8 ~ 8 8 8" # m 1 

d2 silence

d3 silence

do 
  d2 $ (# nudge (fast 8 "0 0.01")) $ drumz $ n "0 0 <0 [0 ~ ~ 0]> [0 0]" # m 1 
  d4 $ (# nudge (fast 2 "0 0.01")) $ struct (fitN 16 "~ t t t ~ ~ ~ ~   ~ t t ~  t t ~ t ") $
         nT "b" 8 (tScale "0 2 3 5 7 9 10" "0 5 4 3 -2 3 2 1 ")  # m 8 

d3 $ (# nudge (fast 8 "0 0.01")) $ drumz $ n "~ 8 8 <8 10> 3 8 10 8 ~ 8 8 8 ~ 3 8 8" # m 1 

do
  d2 silence
  d3 $ (# nudge (fast 8 "0 0.01")) $ drumz $ n "10 ~ ~ 8 ~ 8 ~ 8 ~ 8 ~ 8 ~ <8 10> <8 8 8 10> <8 8>" # m 1  

do
  d2 $ (# nudge (fast 8 "0 0.01")) $ drumz $ n "0 0 <0 [0 ~ ~ 0]> [0 0]" # m 1 
  d3 $ (# nudge (fast 8 "0 0.01")) $ drumz $ n "10 ~ 8 8 ~ 8 8 8 ~ 8 ~ 8 ~ <8 10> <8 8 8 10> <8 8>" # m 1  

d2 silence

do
  d2 $ (# nudge (fast 8 "0 0.01")) $ drumz $ n "0 0 <0 [0 ~ ~ 0]> [0 0]" # m 1 
  d3 $ (# nudge (fast 8 "0 0.01")) $ drumz $ n "10 ~ 15 8 ~ 8 15 8 ~ 8 15 8 ~ <8 10> <8 15 8 10> <8 8>" # m 1  



d1 $ struct (fitN 16 "1 0 10 10 11 1110") $ nT "frodo" 15 (tScale "0 3 10 12" "[0,2,4,6]") # m 5




d1 $ struct "101101101111101101101111" ( nT "fa" 14 (tScale "0 1 3 4 7 10" "7 6 5 1 5 1 4 3 2 3 ")  ) # m 4


d1 $ (# nudge (fast 2 "0.0 0.02")) $ (|+ n "0 4 8 10") $ stack [
    struct "t(9,16)" $ fast 16 $  nT "g" 5 "0 5 10 " # m 4,
     ("0 0.0625" ~>) $ n "[1, 5, 8, 12](<2 2 2 3>,8)" # m 5
]

d2 $ drumz $ n "0 [0, 3] 0 [0, 3]" # m 1

d3 $ (# nudge (fast 2 "0 0.02")) $ drumz $ fast 2 $ n "8!8" # legato (fast 2 ("0.03 0.02 ")) # m 1

d1 $ fast 16 $ nT "a" 5 (patternToList (toScale (patternToList "0 3 7 10")"0 1 2 5 6 7 3 6 3 2 1 2" )) # m 4

d1 $ fast 16 $ nT "aa" 5 (patternToList (toScale (patternToList "0 3 7 10") "0 1 2 5 6 7 3 6 3 2 1 2" )) # m 4

d1 $ (|+ n "0 2") $ struct "t(19, <38 14 18 52>)"  $ nT "aa" 19 "0 3 3 5 7 10" # m 4

d1 $ (|+ n "0 2") $ struct "t(<18 27>, <35 41>)"  $ cat [ nT "aa" 18 "7 3 3 5 7 10 12 15",
        nT "bb" 19 ("6 3 6 0 10 6 12 15" |+ "2")  ] # m "4 5"

d1 $ 
