setcps(130/120/2)

--------------------------------
-- rhythmic manipulation
--------------------------------

-- shifting time
d1 $ (0.25 <~) $ s "bd hh cp hh"  

-- patterning <~  
d1 $ ("0 0 0.1 0" <~) $ s "bd hh cp hh"
-- what happened to the clap?

d1 $ ("0 0 0.25 0" <~) $ s "bd hh cp hh"

-- overshooting 0.25
d1 $ ("0 0 0.3 0" <~) $ s "bd hh cp hh"

d1 $ ("0.25 0.5 0.85 0.5 0.125" <~) $ s "bd hh cp hh"

-- an easier way to achieve a swing is with a different method altogether, using the nudge function
d1 $ s "bd hh cp hh"  # nudge "[0 0.125]*2"

-- is almost the same as
d1 $ ("[0 0.125]*2" ~>) $ s "bd hh cp hh"

("[0 0.125]*2" ~>) $ s "bd hh cp hh"

-- vs the simpler
s "bd hh cp hh"  # nudge "[0 0.125]*2"

-- nudge on the 16th notes for a classic house swing
d1 $ (# nudge "[0 0.015]*8") $ s "bd hh ho hh [bd, cp] hh ho hh bd hh ho hh [bd, cp] hh ho hh" 

-- how can we do more complex, "algorithm-only" things?
d1 $ (fast "1.125 1 1.125 1") $ s "bd hh cp hh" 

d1 $ (fast "2 1 2 1") $ s "bd hh cp hh" 

-- a first attempt at using a sine wave to modulate the tempo
d1 $ (fast sine) $ s "bd hh cp hh" 

d1 $ (fast sine) $ s "bd hh ho hh [bd, cp] hh ho hh bd hh ho hh [bd, cp] hh ho hh" 

-- lets try fixing the range 
d1 $ (fast (range 1 2 sine)) $ s "bd hh cp hh" 

d1 $ (fast (range 1 2 sine)) $ s "bd hh ho hh [bd, cp] hh ho hh bd hh ho hh [bd, cp] hh ho hh" 

-- any kind of mathematical function can be used to modulate tempo (and lots of other things!)
d1 $ (fast ((fast (range 0.25 0.75 sine)) $ range 1 2 sine)) $ s "bd hh ho hh [bd, cp] hh ho hh bd hh ho hh [bd, cp] hh ho hh" 


(fast (range 1 2 sine)) $ s "bd hh cp hh"

(fast ((fast (range 0.25 0.75 sine)) $ range 1 2 sine)) $ s "bd hh ho hh [bd, cp] hh ho hh bd hh ho hh [bd, cp] hh ho hh" 

-- patterning the tempo

-- continuous functions to modulate tempo 
d1 $ s "bd hh cp hh" # cps (slow 8 $ 0.5 + saw)

d1 $ s "bd hh cp hh" # cps (slow 8 $ range 1 2 sine)

-- discrete tempo changes with segment
d1 $ s "bd hh cp hh" # cps (segment 2 ( 0.5 + saw))

d1 $ (slow 4 $ s "bd hh cp hh") # cps (segment 2 ( 0.5 + saw))

d1 $  s "bd hh cp hh" # cps (slow 4 $ segment 2 ( 0.5 + saw))

--------------------------------
-- melodic and harmonic concepts
--------------------------------

-- midi syntax is very similar to the sound syntax.
let m1 = sound "midi" # midichan 0

-- making triplets in melodies.
d1 $ n "0 12 4 12*3" # m1 

-- a non-mininotation way to make triplets in melodies.
d1 $ within (0.75, 1) (fast 3) $ n "0 12 4 12" # m1 

let cMajor = [0, 2, 4, 5, 7, 9, 11]

-- toScale function syntax.
-- map patterns of ints to patterns of different ints 
d1 $ n (toScale cMajor "0 1 2 3")  # m1

-- shifting scale degrees
d1 $ n (toScale cMajor ("0 1 2 3" |+ "[2 4 8]/3"))  # m1

-- shifting chord degrees
d1 $ n (toScale cMajor ("0 1 2 3" |+ "[[0, 2, 4] [1,3,5] [2,4,6]]/3"))  # m1

-- the meaning of '|+' vs '+|'
d1 $ n (toScale cMajor ("0 1 2 3" +| "[[0, 2, 4] [1,3,5] [2,4,6]]/3"))  # m1
-- rhythm is completely different!

-- using struct to provide an independent rhythmic context
-- where the harmonic/melodic elements are a blueprint to 'sample' from.
d1 $ struct "t(3,8)" $ n (toScale cMajor ("0 1 2 3" |+ "[2 4 8]/3"))  # m1

-- another fun idea:  using the new-ish nTake function to SuperCollider's state memory.
d1 $ struct "t(3,8)" $ nTake "myMelody" [0, 2, 4, 9, 2, 4]  # m1

d1 $ struct "t(3,8)" $ nTake "myMelody" [0, 2, 4, 9, 2, 4, 2, 14]  # m1

-- cross rhythms happen when nTake list length neither matches nor evenly subdivides
--  the rhythmic length (onsets per cycle)
-- 9 vs 8.
d1 $ slow 2 $ struct "t(9,16)" $ nTake "myMelody" [0, 2, 4, 9, 2, 4, 2, 14]  # m1

d2 $ s "bd hh cp hh"

-- simpler cross rhythm example:  3 vs 4
d1 $ struct "t(3,8)" $ nTake "myMelody" [0,2,4,9]  # m1
