
let void p scalePatList = cat $ note <$> (`tScale` p) <$> scalePatList 


d1 $ sliceDiv 2 3 4 2 $    off 0.25 (|+ n 12) $ struct "t(9,16)" $ (cat $ n <$> (`tScale` "[0 2] [1 2 3] 2 [4 3]") <$> ["0 4 7 0 11", "0 2 6 7 11", "0 6 7 14 16", " -1 4 7 14 16"]) # m 1 


-- beautiful
d1 $ sliceDiv 13 15 16 "<2 3>" $  void ("[0 1 2 3 4 5 1 2 3 4 0 1 2 3 4 0 1 0 2 0 3 0 4]/4" +| "[0 5 8 11]*4") ["0 2 7 9 11", "0 4 9 11 14", "0 2 4 9 11"] # m "[1, 2, 3, 4]" 


-- recaman's sequence
let recaman = [	0, 1, 3, 6, 2, 7, 13, 20, 12, 21, 11, 22, 10, 23, 9, 24, 8, 25, 43, 62, 42, 63, 41, 18, 42, 17, 43, 16, 44, 15, 45, 14, 46, 79, 113, 78, 114, 77, 39, 78, 38, 79, 37, 80, 36, 81, 35, 82, 34, 83, 33, 84, 32, 85, 31, 86, 30, 87, 29, 88, 28, 89, 27, 90, 26, 91, 157, 224, 156, 225, 155]

let fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155]

let mersenne = [2, 3, 5, 7, 13, 17, 19, 31, 61, 89, 107, 127, 521, 607, 1279, 2203, 2281, 3217, 4253, 4423, 9689, 9941, 11213, 19937, 21701, 23209, 44497, 86243, 110503, 132049, 216091, 756839, 859433, 1257787, 1398269, 2976221, 3021377, 6972593, 13466917, 20996011, 24036583, 25964951, 30402457, 32582657, 37156667, 42643801, 43112609, 57885161]



d1 $ void ( slow "4!7 <3 2 1 1.5>"   $ listToPat $ map (`mod` 12) recaman) ["0 2 4 7 9 11", "-1 2 4 7 9 11"] # m "[1,2,3]"--(listToPat $ map (`mod` 4) recaman )

d1 $ void ( slow "4!7 <3 2 1 1.5>"   $ listToPat $ map ((`mod` 14) . (+ 2)) mersenne) ["0 2 4 7 9 11", "-1 2 4 7 9 11"] # m "[1,2,3]"


d1 $ void ( slow "4!7 <3 2 1 1.5>"   $ listToPat $ map (`mod` 12) fibonacci) ["0 2 4 7 9 11", "-1 2 4 7 9 11"] # m "[1,2,3]"--(listToPat $ map (`mod` 4) recaman )


d1 $ n "d3" # m 1
